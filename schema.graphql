enum TransactionType {
  Invalid
  VaultDeposit
  VaultWithdraw
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyChanged @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  change_type: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DebtUpdated @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  current_debt: BigInt! # uint256
  new_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleSet @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  role: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateFutureRoleManager @entity(immutable: true) {
  id: Bytes!
  future_role_manager: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateRoleManager @entity(immutable: true) {
  id: Bytes!
  role_manager: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateAccountant @entity(immutable: true) {
  id: Bytes!
  accountant: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDepositLimitModule @entity(immutable: true) {
  id: Bytes!
  deposit_limit_module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateWithdrawLimitModule @entity(immutable: true) {
  id: Bytes!
  withdraw_limit_module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDefaultQueue @entity(immutable: true) {
  id: Bytes!
  new_default_queue: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUseDefaultQueue @entity(immutable: true) {
  id: Bytes!
  use_default_queue: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateAutoAllocate @entity(immutable: true) {
  id: Bytes!
  auto_allocate: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatedMaxDebtForStrategy @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  strategy: Bytes! # address
  new_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDepositLimit @entity(immutable: true) {
  id: Bytes!
  deposit_limit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateMinimumTotalIdle @entity(immutable: true) {
  id: Bytes!
  minimum_total_idle: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateProfitMaxUnlockTime @entity(immutable: true) {
  id: Bytes!
  profit_max_unlock_time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DebtPurchased @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Shutdown @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionHistory @entity(immutable: true) {
  id: Bytes!
  vaultAddress: Bytes! # address
  transactionType: TransactionType!
  sender: Bytes! # address
  owner: Bytes! # address
  receiver: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  txHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type VaultStats @entity(immutable: false) {
  " Vault address "
  id: Bytes!
  totalGain: BigInt!
  totalLoss: BigInt!
  currentDebt: BigInt!
  totalProtocolFees: BigInt!
  totalFees: BigInt!
  totalRefunds: BigInt!
  lastUpdateTimestamp: BigInt!
}

type UserVaultStats @entity(immutable: false) {
  " User address + Vault address "
  id: ID!
  totalAssetsDeposited: BigInt!
  totalAssetsWithdrawn: BigInt!
  realizedPnlAssets: BigInt!
  realizedPnlUsd: BigDecimal!
  currentShares: BigInt!
  avgPricePerShare: BigInt!
  lastUpdatedTimestamp: BigInt!
}
