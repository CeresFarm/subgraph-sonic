enum TransactionType {
  Invalid
  VaultDeposit
  VaultWithdraw
  VaultTokenTransfer
}

enum StrategyType {
  Invalid
  CeresLeveragedStrategy
}

enum SnapshotType {
  Hourly
  Daily
  Weekly
}

type StrategyChanged @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  change_type: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DebtUpdated @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  current_debt: BigInt! # uint256
  new_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleSet @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  role: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateFutureRoleManager @entity(immutable: true) {
  id: Bytes!
  future_role_manager: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateRoleManager @entity(immutable: true) {
  id: Bytes!
  role_manager: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateAccountant @entity(immutable: true) {
  id: Bytes!
  accountant: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDepositLimitModule @entity(immutable: true) {
  id: Bytes!
  deposit_limit_module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateWithdrawLimitModule @entity(immutable: true) {
  id: Bytes!
  withdraw_limit_module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDefaultQueue @entity(immutable: true) {
  id: Bytes!
  new_default_queue: [Bytes!]! # address[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUseDefaultQueue @entity(immutable: true) {
  id: Bytes!
  use_default_queue: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateAutoAllocate @entity(immutable: true) {
  id: Bytes!
  auto_allocate: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatedMaxDebtForStrategy @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  strategy: Bytes! # address
  new_debt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDepositLimit @entity(immutable: true) {
  id: Bytes!
  deposit_limit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateMinimumTotalIdle @entity(immutable: true) {
  id: Bytes!
  minimum_total_idle: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateProfitMaxUnlockTime @entity(immutable: true) {
  id: Bytes!
  profit_max_unlock_time: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DebtPurchased @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Shutdown @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Vault @entity(immutable: false) {
  " Vault address "
  id: Bytes!

  " Protocol stats - used to link the vault to the protocol entity "
  protocolStats: ProtocolStats!

  " Vault name "
  name: String!

  " Vault symbol  "
  symbol: String!

  " Vault decimals "
  decimals: Int!

  " Underlying asset address "
  asset: Bytes!

  totalAssets: BigInt!

  totalSupply: BigInt!

  pricePerShare: BigInt!

  depositLimit: BigInt!

  strategies: [Strategy!]! @derivedFrom(field: "vault")

  isShutdown: Boolean!

  lastUpdatedTimestamp: BigInt!

  lastHourlySnapshot: BigInt!

  lastDailySnapshot: BigInt!

  lastWeeklySnapshot: BigInt!
}

"""
 This strategy entity should only have the fields of the Yearn ERC4626 strategy contract "
" Any custom strategy specific fields should go in a separate entity with the same address based on the strategyType "
"""
type Strategy @entity(immutable: false) {
  " Strategy address"
  id: Bytes!

  " Protocol stats - used to link the strategy to the protocol entity "
  protocolStats: ProtocolStats!

  " Strategy name"
  name: String!

  " Strategy symbol "
  symbol: String!

  " Strategy decimals "
  decimals: Int!

  " Strategy type "
  strategyType: StrategyType!

  " Vault the strategy is linked to "
  vault: Vault!

  totalAssets: BigInt!

  totalSupply: BigInt!

  pricePerShare: BigInt!

  performanceFeeBps: Int!

  protocolFeeBps: Int!

  isActive: Boolean!

  lastReportTimestamp: BigInt!

  totalProfit: BigInt!

  totalLoss: BigInt!

  totalProtocolFees: BigInt!

  totalPerformanceFees: BigInt!

  lastSnapshotTimestamp: BigInt!
}

type TransactionHistory @entity(immutable: true) {
  id: Bytes!
  vaultAddress: Bytes! # address
  transactionType: TransactionType!
  sender: Bytes! # address
  owner: Bytes! # address
  receiver: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  txHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type VaultStats @entity(immutable: false) {
  " Vault address "
  id: Bytes!
  totalGain: BigInt!
  totalLoss: BigInt!
  currentDebt: BigInt!
  totalProtocolFees: BigInt!
  totalFees: BigInt!
  totalRefunds: BigInt!
  lastUpdateTimestamp: BigInt!
}

type UserVaultStats @entity(immutable: false) {
  " User address + Vault address "
  id: ID!
  userAddress: Bytes!
  vaultAddress: Bytes!
  totalAssetsDeposited: BigInt!
  totalAssetsWithdrawn: BigInt!
  realizedPnlAssets: BigInt!
  realizedPnlUsd: BigDecimal!
  currentShares: BigInt!
  avgPricePerShare: BigInt!
  lastUpdatedTimestamp: BigInt!
}

type NewVault @entity(immutable: true) {
  id: Bytes!
  vault_address: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewStrategy @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolStats @entity(immutable: false) {
  id: ID!
  vaults: [Bytes!]!
  strategies: [Bytes!]!
}

type VaultSnapshot @entity(immutable: true) {
  " Vault address + timestamp + logIndex"
  id: ID!
  vault: Vault!
  snapshotType: SnapshotType!
  timestamp: BigInt!
  blockNumber: BigInt!
  pricePerShare: BigInt!
  totalAssets: BigInt!
  depositApy: BigDecimal!
  borrowApy: BigDecimal!
}
